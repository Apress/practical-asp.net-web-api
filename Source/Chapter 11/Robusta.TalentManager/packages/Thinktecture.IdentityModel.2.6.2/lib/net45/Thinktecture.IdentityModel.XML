<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thinktecture.IdentityModel</name>
    </assembly>
    <members>
        <member name="P:Thinktecture.IdentityModel.Clients.AccessControlService.IdentityProviderInformation.Name">
            <summary>
            The display name for the identity provider.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Clients.AccessControlService.IdentityProviderInformation.LoginUrl">
            <summary>
            The url used for Login to the identity provider.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Clients.AccessControlService.IdentityProviderInformation.ImageUrl">
            <summary>
            The url that is used to retrieve the image for the identity provider
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.Clients.AccessControlService.IdentityProviderInformation.EmailAddressSuffixes">
            <summary>
            A list fo email address suffixes configured for the identity provider.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.ConsoleExtensions">
            <summary>
            Helper class to write out colored messages to the console
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.ConsoleExtensions.ConsoleGreen(System.String)">
            <summary>
            Writes green text to the console.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.ConsoleExtensions.ConsoleRed(System.String)">
            <summary>
            Writes red text to the console.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.ConsoleExtensions.ConsoleYellow(System.String)">
            <summary>
            Writes yellow text to the console.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.ConsoleExtensions.ColoredWriteLine(System.String,System.ConsoleColor)">
            <summary>
            Writes out text with the specified ConsoleColor.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.DateTimeExtensions.ToEpochTime(System.DateTime)">
            <summary>
            Converts the given date value to epoch time.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.DateTimeExtensions.ToEpochTime(System.DateTimeOffset)">
            <summary>
            Converts the given date value to epoch time.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.DateTimeExtensions.ToDateTimeFromEpoch(System.Int64)">
            <summary>
            Converts the given epoch time to a <see cref="T:System.DateTime"/> with <see cref="F:System.DateTimeKind.Utc"/> kind.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.DateTimeExtensions.ToDateTimeOffsetFromEpoch(System.Int64)">
            <summary>
            Converts the given epoch time to a UTC <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:HttpUserNameSecurityTokenHandler"/> class.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.#ctor(Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.ValidateUserNameCredentialDelegate)">
            <summary>
            Initializes a new instance of the <see cref="!:HttpUserNameSecurityTokenHandler"/> class.
            </summary>
            <param name="validateUserNameCredential">The credential validation callback.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Validates the username and password.
            </summary>
            <param name="token">The token.</param>
            <returns>An identity collection representing the identity in the token</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.ValidateUserNameCredentialCore(System.String,System.String)">
            <summary>
            Validates the user name credential core.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="P:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.ValidateUserNameCredential">
            <summary>
            Gets or sets the credential validation callback
            </summary>
            <value>
            The credential validation callback.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.CanValidateToken">
            <summary>
            Gets a value indicating whether this instance can validate a token.
            </summary>
            <value>
            	<c>true</c> if this instance can validate a token; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.Http.BasicAuthenticationSecurityTokenHandler.ValidateUserNameCredentialDelegate">
            <summary>
            Callback type for validating the credential
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>True when the credential could be validated succesfully. Otherwise false.</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Clients.WrapClient">
            <summary>
            Implements the OAuth WRAP protocol to request tokens from an issuer.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Clients.WrapClient.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Clients.WrapClient"/> class.
            </summary>
            <param name="issuerAddress">The issuer address.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Clients.WrapClient.Issue(System.String,System.String,System.Uri)">
            <summary>
            Requests an SWT Token using username/password credentials.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="scope">The requested scope.</param>
            <returns>The requested SWT token</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Clients.WrapClient.Issue(Thinktecture.IdentityModel.Tokens.SimpleWebToken,System.Uri)">
            <summary>
            Requests an SWT Token using an input SWT token.
            </summary>
            <param name="token">The input SWT token.</param>
            <param name="scope">The requested scope.</param>
            <returns>The requested SWT token</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Clients.WrapClient.Issue(System.IdentityModel.Tokens.SamlSecurityToken,System.Uri)">
            <summary>
            Requests an SWT Token using an input SAML token.
            </summary>
            <param name="token">The input SAML token.</param>
            <param name="scope">The requested scope.</param>
            <returns>The requested SWT token</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Clients.WrapClient.Issue(System.IdentityModel.Tokens.GenericXmlSecurityToken,System.Uri)">
            <summary>
            Requests an SWT Token using an input GenericXml SAML token.
            </summary>
            <param name="token">The input GenericXml SAML token.</param>
            <param name="scope">The requested scope.</param>
            <returns>The requested SWT token</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Clients.WrapClient.IssueAssertion(System.String,System.String,System.Uri)">
            <summary>
            Requests an SWT Token using an input assertion.
            </summary>
            <param name="token">The assertion.</param>
            <param name="assertionFormat">The assertion format.</param>
            <param name="scope">The requested scope.</param>
            <returns>The requested SWT token</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Diagnostics.Tracing">
            <summary>
            Helper class for Tracing
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Authorization.ClaimPermission">
            <summary>
            Encapsulates calls to ClaimsAuthorizationManager with custom claim types in a CLR permission
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Authorization.ClaimPermission.ActionType">
            <summary>
            Default action claim type.
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Authorization.ClaimPermission.ResourceType">
            <summary>
            Default resource claim type
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Authorization.ClaimPermission"/> class.
            </summary>
            <param name="resource">The resource.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Authorization.ClaimPermission"/> class.
            </summary>
            <param name="resourceType">Type of the resource.</param>
            <param name="resource">The resource.</param>
            <param name="actionType">Type of the action.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.Copy">
            <summary>
            Creates and returns an identical copy of the current permission.
            </summary>
            <returns>
            A copy of the current permission.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.Demand">
            <summary>
            Throws a <see cref="T:System.Security.SecurityException"/> at run time if the security requirement is not met.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.CheckAccess(System.String,System.String,System.Security.Claims.Claim[])">
            <summary>
            Calls ClaimsAuthorizationManager.
            </summary>
            <param name="action">The action.</param>
            <param name="resource">The resource.</param>
            <param name="additionalResources">Additional resources.</param>
            <returns>True when access is granted. Otherwise false.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.FromXml(System.Security.SecurityElement)">
            <summary>
            Reconstructs a security object with a specified state from an XML encoding.
            </summary>
            <param name="e">The XML encoding to use to reconstruct the security object.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.Intersect(System.Security.IPermission)">
            <summary>
            Creates and returns a permission that is the intersection of the current permission and the specified permission.
            </summary>
            <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
            <returns>
            A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="target"/> parameter is not null and is not an instance of the same class as the current permission. </exception>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.IsSubsetOf(System.Security.IPermission)">
            <summary>
            Determines whether the current permission is a subset of the specified permission.
            </summary>
            <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
            <returns>
            true if the current permission is a subset of the specified permission; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="target"/> parameter is not null and is not of the same type as the current permission. </exception>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.IsUnrestricted">
            <summary>
            Returns a value indicating whether unrestricted access to the resource protected by the permission is allowed.
            </summary>
            <returns>
            true if unrestricted use of the resource protected by the permission is allowed; otherwise, false.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.ToXml">
            <summary>
            Creates an XML encoding of the security object and its current state.
            </summary>
            <returns>
            An XML encoding of the security object, including any state information.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermission.Union(System.Security.IPermission)">
            <summary>
            Creates a permission that is the union of the current permission and the specified permission.
            </summary>
            <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
            <returns>
            A new permission that represents the union of the current permission and the specified permission.
            </returns>
            <exception cref="T:System.ArgumentException">The <paramref name="target"/> parameter is not null and is not of the same type as the current permission. </exception>
        </member>
        <member name="T:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute">
            <summary>
            Permission Attribute for calling ClaimsAuthorizationManager with custom claim types
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute"/> class.
            </summary>
            <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction"/> values.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.CreatePermission">
            <summary>
            When overridden in a derived class, creates a permission object that can then be serialized into binary form and persistently stored along with the <see cref="T:System.Security.Permissions.SecurityAction"/> in an assembly's metadata.
            </summary>
            <returns>
            A serializable permission object.
            </returns>
        </member>
        <member name="P:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.ResourceType">
            <summary>
            Gets or sets the claim type of the resource.
            </summary>
            <value>
            The claim type of the resource.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.Resource">
            <summary>
            Gets or sets the resource name.
            </summary>
            <value>
            The resource name.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.OperationType">
            <summary>
            Gets or sets the claim type of the operation.
            </summary>
            <value>
            The claim type of the operation.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityModel.Authorization.ClaimPermissionAttribute.Operation">
            <summary>
            Gets or sets the operation name .
            </summary>
            <value>
            The operation name.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityModel.AuthenticationInstantClaim">
            <summary>
            Helper class to create an authentication instant claim
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityModel.AuthenticationInstantClaim.Now">
            <summary>
            Returns an authentication instant claim for the current date/time
            </summary>
            <value>authentication instant claim.</value>
        </member>
        <member name="T:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization">
            <summary>
            Provides direct access methods for evaluating authorization policy
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.ActionType">
            <summary>
            Default action claim type.
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.ResourceType">
            <summary>
            Default resource claim type
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.CheckAccess(System.String,System.String[])">
            <summary>
            Checks the authorization policy.
            </summary>
            <param name="resource">The resource.</param>
            <param name="action">The action.</param>
            <returns>true when authorized, otherwise false</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.CheckAccess(System.Collections.ObjectModel.Collection{System.Security.Claims.Claim},System.Collections.ObjectModel.Collection{System.Security.Claims.Claim})">
            <summary>
            Checks the authorization policy.
            </summary>
            <param name="actions">The actions.</param>
            <param name="resources">The resources.</param>
            <returns>true when authorized, otherwise false</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.CheckAccess(System.String,System.Security.Claims.Claim[])">
            <summary>
            Checks the authorization policy.
            </summary>
            <param name="action">The action.</param>
            <param name="resources">The resources.</param>
            <returns>true when authorized, otherwise false</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.CheckAccess(System.String,System.String,System.Security.Claims.Claim[])">
            <summary>
            Checks the authorization policy.
            </summary>
            <param name="action">The action.</param>
            <param name="resource">The resource name.</param>
            <param name="resources">The resources.</param>
            <returns>true when authorized, otherwise false</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.CheckAccess(System.Security.Claims.AuthorizationContext)">
            <summary>
            Checks the authorization policy.
            </summary>
            <param name="context">The authorization context.</param>
            <returns>true when authorized, otherwise false</returns>
        </member>
        <member name="P:Thinktecture.IdentityModel.Authorization.ClaimsAuthorization.AuthorizationManager">
            <summary>
            Gets the registered authorization manager.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.CryptoRandom">
            <summary>
            A class that mimics the standard Random class in the .NET Framework - but uses RNGCryptoServiceProvider internally.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.CryptoRandom"/> class.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.CryptoRandom"/> class.
            </summary>
            <param name="ignoredSeed">seed (ignored)</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. <paramref name="maxValue"/> must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than <paramref name="maxValue"/>; that is, the range of return values ordinarily includes zero but not <paramref name="maxValue"/>. However, if <paramref name="maxValue"/> equals zero, <paramref name="maxValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="maxValue"/> is less than zero.
            </exception>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
            <returns>
            A 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>; that is, the range of return values includes <paramref name="minValue"/> but not <paramref name="maxValue"/>. If <paramref name="minValue"/> equals <paramref name="maxValue"/>, <paramref name="minValue"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="minValue"/> is greater than <paramref name="maxValue"/>.
            </exception>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.CryptoRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is null.
            </exception>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.RequestSecurityTokenResponseExtensions">
            <summary>
            Extension methods for RequestSecurityTokenResponse
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RequestSecurityTokenResponseExtensions.ToGenericXmlSecurityToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse)">
            <summary>
            Turns a RSTR into a GenericXmlSecurityToken.
            </summary>
            <param name="rstr">The RSTR.</param>
            <returns>A GenericXmlSecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RequestSecurityTokenResponseExtensions.ToGenericXmlSecurityToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
            <summary>
            Turns a RST/RSTR pair into a GenericXmlSecurityToken.
            </summary>
            <param name="rstr">The RSTR.</param>
            <param name="rst">The RST.</param>
            <returns>A GenericXmlSecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RequestSecurityTokenResponseExtensions.ToGenericXmlSecurityToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Turns a RST/ProofKey pair into a GenericXmlSecurityToken.
            </summary>
            <param name="rstr">The RSTR.</param>
            <param name="proofKey">The ProofKey.</param>
            <returns>A GenericXmlSecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RequestSecurityTokenResponseExtensions.GetProofKey(System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)">
            <summary>
            Gets the proof key from an RST/RSTR pair.
            </summary>
            <param name="rstr">The RSTR.</param>
            <param name="rst">The RST.</param>
            <returns>The proof key.</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions">
            <summary>
            Extension methods to convert tokens to string and claims
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToSecurityToken(System.IdentityModel.Tokens.GenericXmlSecurityToken)">
            <summary>
            Turns a supported generic XML security token to a security token.
            </summary>
            <param name="token">The generic XML security token.</param>
            <returns>A SecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToSecurityToken(System.IdentityModel.Tokens.GenericXmlSecurityToken,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Turns a supported generic XML security token to a security token.
            </summary>
            <param name="token">The token.</param>
            <param name="decryptionCertificate">The decryption certificate.</param>
            <returns>A SecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToSecurityToken(System.IdentityModel.Tokens.GenericXmlSecurityToken,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
            <summary>
            Turns a supported generic XML security token to a security token.
            </summary>
            <param name="token">The generic XML security token.</param>
            <param name="handler">The security token handler.</param>
            <returns>A SecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToTokenXmlString(System.IdentityModel.Tokens.GenericXmlSecurityToken)">
            <summary>
            Retrieves the XML from a GenericXmlSecurityToken
            </summary>
            <param name="token">The token.</param>
            <returns>The token XML string.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToTokenXmlString(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Converts a supported token to an XML string.
            </summary>
            <param name="token">The token.</param>
            <returns>The token XML string.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToTokenXmlString(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
            <summary>
            Converts a supported token to an XML string.
            </summary>
            <param name="token">The token.</param>
            <param name="handler">The token handler.</param>
            <returns>The token XML string.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToClaimsPrincipal(System.IdentityModel.Tokens.SecurityToken,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Converts a SecurityToken to an IClaimsPrincipal.
            </summary>
            <param name="token">The token.</param>
            <param name="signingCertificate">The signing certificate.</param>
            <returns>An IClaimsPrincipal</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToClaimsPrincipal(System.IdentityModel.Tokens.SecurityToken,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Converts a SecurityToken to an IClaimsPrincipal.
            </summary>
            <param name="token">The token.</param>
            <param name="signingCertificate">The signing certificate.</param>
            <param name="audienceUri">The audience URI.</param>
            <returns>An IClaimsPrincipal</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.SecurityTokensExtensions.ToClaimsPrincipal(System.IdentityModel.Tokens.SecurityToken,System.IdentityModel.Tokens.SecurityTokenHandlerCollection)">
            <summary>
            Converts a SecurityToken to an IClaimsPrincipal.
            </summary>
            <param name="token">The token.</param>
            <param name="handler">The handler.</param>
            <returns>An IClaimsPrincipal</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.XmlExtensions">
            <summary>
            Extension methods for XML related tasks
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.AsString(System.Xml.XmlReader)">
            <summary>
                Converts an XmlReader to a string.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.AsXmlReader(System.String)">
            <summary>
            Converts a string to an XmlReader.
            </summary>
            <param name="input">The input string.</param>
            <returns>An XmlReader</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.AsXmlReader(System.String,System.Boolean)">
            <summary>
            Converts a string to an XmlReader.
            </summary>
            <param name="input">The input.</param>
            <param name="isInteractive">if set to <c>true</c> the reader will be in an interactive state.</param>
            <returns>An XmlReader</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.ToXDocument(System.Xml.XmlDocument)">
            <summary>
            Converts a XmlDocument to a XDocument.
            </summary>
            <param name="document">The XmlDocument.</param>
            <returns>A XDocument</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.ToXElement(System.Xml.XmlElement)">
            <summary>
            Converts a XmlElement to a XElement.
            </summary>
            <param name="element">The XmlElement.</param>
            <returns>A XElement</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.ToXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
            Converts a XDocument to a XmlDocument.
            </summary>
            <param name="document">The XDocument.</param>
            <returns>A XmlDocument</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.XmlExtensions.ToXmlElement(System.Xml.Linq.XElement)">
            <summary>
            Converts a XElement to a XmlElement.
            </summary>
            <param name="element">The XElement.</param>
            <returns>A XmlElement</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.ObfuscatingComparer">
            <summary>
            Helper class to do equality checks without leaking timing information
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.ObfuscatingComparer.IsEqual(System.String,System.String)">
            <summary>
            Checks two strings for equality without leaking timing information.
            </summary>
            <param name="s1">string 1.</param>
            <param name="s2">string 2.</param>
            <returns>
            	<c>true</c> if the specified strings are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler">
            <summary>
            Generic security token handler for username/password type credentials
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler"/> class.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.#ctor(Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.ValidateUserNameCredentialDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler"/> class.
            </summary>
            <param name="validateUserNameCredential">The credential validation callback.</param>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.ValidateUserNameCredentialCore(System.String,System.String)">
            <summary>
            Validates the user name credential core.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Validates the username and password.
            </summary>
            <param name="token">The token.</param>
            <returns>A ClaimsIdentityCollection representing the identity in the token</returns>
        </member>
        <member name="P:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.ValidateUserNameCredential">
            <summary>
            Gets or sets the credential validation callback
            </summary>
            <value>
            The credential validation callback.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.CanValidateToken">
            <summary>
            Gets a value indicating whether this instance can validate a token.
            </summary>
            <value>
            	<c>true</c> if this instance can validate a token; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.GenericUserNameSecurityTokenHandler.ValidateUserNameCredentialDelegate">
            <summary>
            Callback type for validating the credential
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>True when the credential could be validated succesfully. Otherwise false.</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.WSTrust.WSTrustClient">
            <summary>
            Wrapper for the WIF WSTrustChannelFactory/WSTrustChannel plumbing.
            This code is mainly for convience and does not provide any optimizations like caching of the channel factory.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.WSTrust.WSTrustClient.Issue(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials)">
            <summary>
            Requests a bearer token.
            </summary>
            <param name="stsAddress">The STS address.</param>
            <param name="appliesTo">The realm address.</param>
            <param name="binding">The binding.</param>
            <param name="credentials">The credentials.</param>
            <returns>A SecurityToken</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.WSTrust.WSTrustClient.Issue(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse@)">
            <summary>
            Requests a token desribed by an RST.
            </summary>
            <param name="stsAddress">The STS address.</param>
            <param name="binding">The binding.</param>
            <param name="credentials">The credentials.</param>
            <param name="rst">The RST.</param>
            <param name="rstr">The RSTR.</param>
            <returns>A SecurityToken</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Constants.DateTimeFormats">
            <summary>
            Represents DateTimeFormats used in tokens and claims
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Constants.DateTimeFormats.Accepted">
            <summary>
            Accepted DateTime formats
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityModel.Constants.DateTimeFormats.Generated">
            <summary>
            Generated DateTime format
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.X509CertificateEndpointIdentityExtensions">
            <summary>
            Extension methods for X509CertificateEndpointIdentity
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.X509CertificateEndpointIdentityExtensions.GetEndCertificate(System.ServiceModel.X509CertificateEndpointIdentity)">
            <summary>
            Finds the leaf certificate on an X509EndpointIdentity
            </summary>
            <param name="epi">The epi.</param>
            <returns>The target site X509 certificate</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.Http.HttpsIssuerNameRegistry">
            <summary>
            Simple implementation of an issuer registy that returns the certificate issuer name or public key hash as an issuer
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.Http.HttpsIssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Gets the name of the issuer.
            </summary>
            <param name="securityToken">The security token.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.SimpleWebToken">
            <summary>
            This class represents the token format for the SimpleWebToken.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebToken.VerifySignature(System.Byte[])">
            <summary>
            Verifies the signature of the token.
            </summary>
            <param name="key">The key used for signing.</param>
            <returns>true if the signatures match, false otherwise.</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler">
            <summary>
            Handles SWT tokens.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler.ReadToken(System.String)">
            <summary>
            Reads a serialized token and converts it into a <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.
            </summary>
            <param name="rawToken">The token in serialized form.</param>
            <returns>The parsed form of the token.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler.ParseToken(System.String)">
            <summary>
            Parses the token into a collection.
            </summary>
            <param name="encodedToken">The serialized token.</param>
            <returns>A colleciton of all name-value pairs from the token.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler.DecodeClaims(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>Create <see cref="T:System.Security.Claims.Claim"/> from the incoming token.
            </summary>
            <param name="issuer">The issuer of the token.</param>
            <param name="rawClaims">The name value pairs from the token.</param>        
            <returns>A list of Claims created from the token.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler.DecodeExpiry(System.String)">
            <summary>
            Convert the expiryTime to the <see cref="T:System.DateTime"/> format.
            </summary>
            <param name="expiry">The expiry time from the token.</param>
            <returns>The local expiry time of the token.</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.SimpleWebTokenHandler.SignVerify(Thinktecture.IdentityModel.Tokens.SimpleWebToken,System.Byte[])">
            <summary>
            Verifies the signature of the incoming token.
            </summary>
            <param name="key">The key used for signing.</param>
            <returns>true if the signatures match, false otherwise.</returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Tokens.TestIssuerNameRegistry">
            <summary>
            Simple implementation of an issuer registy that returns the certificate issuer name or public key hash as an issuer
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Tokens.TestIssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Gets the name of the issuer.
            </summary>
            <param name="securityToken">The security token.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityModel.Extensions.RSAExtensions">
            <summary>
            Extension methods for RSACryptoServiceProvider
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RSAExtensions.GetKeyHash(System.Security.Cryptography.RSA)">
            <summary>
            Calculates a hash for an RSA key.
            </summary>
            <param name="rsa">The RSA key.</param>
            <returns>The hash byte array</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RSAExtensions.GetKeyHashString(System.Security.Cryptography.RSA)">
            <summary>
            Calculates a hash string for an RSA key.
            </summary>
            <param name="rsa">The RSA key.</param>
            <returns>The hash string</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RSAExtensions.GetKeyHashString(System.Security.Cryptography.RSA,System.String)">
            <summary>
            Calculates a hash string for an RSA key.
            </summary>
            <param name="rsa">The RSA Key</param>
            <param name="entropy">Additional entropy.</param>
            <returns>The hash string</returns>
        </member>
        <member name="M:Thinktecture.IdentityModel.Extensions.RSAExtensions.GetKeyHash(System.Security.Cryptography.RSA,System.String)">
            <summary>
            Calculates a hash for an RSA key.
            </summary>
            <param name="rsa">The RSA key.</param>
            <param name="entropy">Additional entropy.</param>
            <returns>The hash byte array</returns>
        </member>
    </members>
</doc>
